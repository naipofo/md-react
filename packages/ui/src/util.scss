@use "sass:map";

/* TODO: full corners on other axis and vertical-rl support */
/* TODO: animating from n to full-corner should not overshoot! -
 it causes problems with the other side of the element! */
@mixin apply-height($value) {
  height: $value;
  --md-sys-shape-corner-full: calc(#{$value} / 2);
}

@mixin apply-border-width($value) {
  border-width: $value;
  --md-runtime-ripple-border-width: #{$value};
}

@mixin apply-motion($motion, $properties...) {
  transition-property: $properties;
  transition-duration: map.get($motion, "duration");
  transition-timing-function: map.get($motion, "easing");
}

@function has-token($set, $suffix) {
  @return map.has-key(map.get($set, tokens), $suffix);
}

@function get-token-raw($set, $suffix) {
  @return map.get(map.get($set, tokens), $suffix);
}

@function get-token($set, $suffix, $default: unset) {
  $token: get-token-raw($set, $suffix);
  $final-value: $default;
  @if (has-token($set, $suffix)) {
    $final-value: get-token-raw($set, $suffix);
  }
  @return var(--#{map.get($set, name)}-#{$suffix}, $final-value);
}

@mixin apply-if-token-present($attribute, $set, $suffix) {
  $token: get-token-raw($set, $suffix);
  @if ($token) {
    #{$attribute}: get-token($set, $suffix);
  }
}

@mixin apply-local-typescale-token($set, $suffix) {
  $token: get-token-raw($set, $suffix);
  font-family: get-token($set, map.get($token, font-family));
  font-weight: get-token($set, map.get($token, font-weight));
  font-size: get-token($set, map.get($token, font-size));
  letter-spacing: get-token($set, map.get($token, letter-spacing));
  line-height: get-token($set, map.get($token, line-height));
}

@mixin apply-typescale($set, $suffix) {
  $token: get-token-raw($set, $suffix);
  font-family: map.get($token, font-family);
  font-weight: map.get($token, font-weight);
  font-size: map.get($token, font-size);
  letter-spacing: map.get($token, letter-spacing);
  line-height: map.get($token, line-height);
}

@mixin apply-button-group-aware-padding(
  $set,
  $leading-suffix,
  $trailing-suffix
) {
  $padding-leading: calc(
    get-token($set, $leading-suffix) - var(
        --md-runtime-ripple-border-width,
        0px
      )
  );
  $padding-trailing: calc(
    get-token($set, $trailing-suffix) - var(
        --md-runtime-ripple-border-width,
        0px
      )
  );
  padding-inline-start: $padding-leading;
  padding-inline-end: $padding-trailing;

  $smaller-of-padding: min($padding-leading, $padding-trailing);

  .MdcButtonGroup.MdcButtonGroup-standard *:active + &,
  .MdcButtonGroup.MdcButtonGroup-standard &:has(+ *:active) {
    padding-inline-start: calc(
      $padding-leading - var(--md-runtime-group-padding-shrink)
    );
    padding-inline-end: calc(
      $padding-trailing - var(--md-runtime-group-padding-shrink)
    );
  }

  .MdcButtonGroup.MdcButtonGroup-standard &:active {
    padding-inline-start: calc(
      $padding-leading + var(--md-runtime-group-padding-grow)
    );
    padding-inline-end: calc(
      $padding-trailing + var(--md-runtime-group-padding-grow)
    );
  }

  & + * {
    --md-runtime-group-padding-from-left: #{$smaller-of-padding};
  }
  :has(+ &) {
    --md-runtime-group-padding-from-right: #{$smaller-of-padding};
  }
}

@mixin connected-button-group-corners($toggleClass) {
  .MdcButtonGroup.MdcButtonGroup-connected &.#{$toggleClass} {
    border-radius: var(--md-runtime-group-inner-corner);

    &.MdcButton-selected {
      border-radius: var(--md-runtime-group-selected-corner-size);
    }
    &:active {
      border-radius: var(--md-runtime-group-pressed-corner);
    }

    &:last-of-type {
      border-top-right-radius: var(--md-runtime-group-outer-corner);
      border-bottom-right-radius: var(--md-runtime-group-outer-corner);
    }
    &:first-of-type {
      border-top-left-radius: var(--md-runtime-group-outer-corner);
      border-bottom-left-radius: var(--md-runtime-group-outer-corner);
    }
  }
}
