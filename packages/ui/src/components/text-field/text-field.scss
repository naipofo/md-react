@use "../../tokens/component-tokens/md-comp-outlined-text-field.scss" as *;
@use "../../tokens/component-tokens/md-comp-filled-text-field.scss" as *;
@use "../../util.scss" as *;
@use "../../tokens/sys-tokens.scss" as *;

/* TODO: border-width animation is stepping in chromium
 and it's inconsistent with the border-top in webkit */

/* TODO: border-width changes on active - that influences the offset calculation
 for the label in outlined - shifting it slightly! */

/* TODO: disabled styles */

@mixin text-field-variants-common {
  $variants: (
    outlined: $md-comp-outlined-text-field,
    filled: $md-comp-filled-text-field,
  );

  @each $name, $token in $variants {
    &.MdcTextField-#{$name} {
      & .MdcTextField-input-container {
        @include apply-height(get-token($token, container-height));
      }

      & .MdcTextField-input-container,
      & .MdcTextField-border {
        border-radius: get-token($token, container-shape);
      }

      & input {
        @include apply-local-typescale-token($token, input-text-type);
        color: rgb(get-token($token, input-text-color));
        caret-color: rgb(get-token($token, caret-color));
        &::placeholder {
          color: rgb(get-token($token, input-text-placeholder-color));
        }
      }

      & .MdcTextField-supporting-text-container {
        @include apply-local-typescale-token($token, supporting-text-type);
        color: rgb(get-token($token, supporting-text-color));
      }

      & .MdcTextField-label-visible {
        @include apply-local-typescale-token($token, label-text-type);
        color: rgb(get-token($token, label-text-color));
        left: calc(16px + get-token($token, outline-width, 0px));
      }

      &.MdcTextField-error {
        & .MdcTextField-label-visible {
          color: rgb(get-token($token, error-label-text-color));
        }
        & .MdcTextField-supporting-text-container {
          color: rgb(get-token($token, error-supporting-text-color));
        }
      }

      &:has(input:focus),
      &:has(input:not(:placeholder-shown)) {
        & .MdcTextField-label-visible {
          line-height: get-token($token, label-text-populated-line-height);
          font-size: get-token($token, label-text-populated-size);
        }
      }

      &:has(input:focus) {
        & .MdcTextField-label-visible {
          color: rgb(get-token($token, focus-label-text-color));
        }
        &.MdcTextField-error .MdcTextField-label-visible {
          color: rgb(get-token($token, error-focus-label-text-color));
        }
        & input::placeholder {
          opacity: 1;
        }
      }

      &:hover {
        & .MdcTextField-label-visible {
          color: rgb(get-token($token, hover-label-text-color));
        }
        &.MdcTextField-error .MdcTextField-label-visible {
          color: rgb(get-token($token, error-hover-label-text-color));
        }
      }

      &:has(input:disabled) {
        & .MdcTextField-label-visible {
          color: rgba(
            get-token($token, disabled-label-text-color),
            get-token($token, disabled-label-text-opacity)
          );
        }

        & input {
          color: rgba(
            get-token($token, disabled-input-text-color),
            get-token($token, disabled-input-text-opacity)
          );
        }

        & .MdcTextField-supporting-text-container {
          color: rgba(
            get-token($token, disabled-supporting-text-color),
            get-token($token, disabled-supporting-text-opacity)
          );
        }
      }
    }
  }
}

.MdcTextField {
  @include text-field-variants-common;
  position: relative;

  & .MdcTextField-input-container {
    contain: size;
    width: 400px;
    position: relative;
  }

  & input {
    position: absolute;
    inset: 0;
    border: none;
    background-color: transparent;
    padding-inline: 16px;
    padding-block: 16px;

    @include apply-motion(
      $md-sys-motion-spring-fast-effects,
      padding-block-start,
      padding-block-end
    );

    &:focus-visible {
      outline: none;
    }

    &::placeholder {
      opacity: 0;
      @include apply-motion($md-sys-motion-spring-fast-effects, opacity);
    }
  }

  & .MdcTextField-label-border-animation,
  & .MdcTextField-label-visible {
    position: absolute;
    pointer-events: none;
  }

  & .MdcTextField-label-visible {
    transform: translateY(-50%);
    top: 50%;
    @include apply-motion(
      $md-sys-motion-spring-fast-effects,
      left,
      top,
      line-height,
      font-size,
      padding-inline,
      color,
      transform
    );
  }

  &.MdcTextField-outlined {
    & .MdcTextField-label-visible {
      padding-inline: 4px;
    }

    --border-width: #{get-token($md-comp-outlined-text-field, outline-width)};
    --border-color: rgb(
      #{get-token($md-comp-outlined-text-field, outline-color)}
    );

    @include apply-focus-ring-indicator($md-comp-outlined-text-field);

    $border-radius: get-token($md-comp-outlined-text-field, container-shape);
    $clip-path-outset: calc(var(--border-width) + $border-radius);

    &.MdcTextField-error {
      --border-color: rgb(
        #{get-token($md-comp-outlined-text-field, error-outline-color)}
      );
    }

    &:has(input:focus) {
      --border-width: #{get-token(
          $md-comp-outlined-text-field,
          focus-outline-width
        )};
      --border-color: rgb(
        #{get-token($md-comp-outlined-text-field, focus-outline-color)}
      );
      &.MdcTextField-error {
        --border-color: rgb(
          #{get-token($md-comp-outlined-text-field, error-focus-outline-color)}
        );
      }
    }

    &:hover {
      --border-color: rgb(
        #{get-token($md-comp-outlined-text-field, hover-outline-color)}
      );
      &.MdcTextField-error {
        --border-color: rgb(
          #{get-token($md-comp-outlined-text-field, error-hover-outline-color)}
        );
      }
    }

    &:has(input:disabled) {
      --border-width: #{get-token(
          $md-comp-outlined-text-field,
          disabled-outline-width
        )};
      --border-color: rgba(
        #{get-token($md-comp-outlined-text-field, disabled-outline-color)},
        #{get-token($md-comp-outlined-text-field, disabled-outline-opacity)}
      );
    }

    & .MdcTextField-border {
      border-width: var(--border-width);
      border-style: solid;
      border-color: var(--border-color);
      position: absolute;
      inset: 0;
      clip-path: polygon(
        -10% 0,
        -10% 110%,
        110% 110%,
        110% 0,
        0 0,
        $clip-path-outset 0,
        calc(100% - $clip-path-outset) 0,
        calc(100% - $clip-path-outset) calc(100% - $clip-path-outset),
        $clip-path-outset calc(100% - $clip-path-outset),
        $clip-path-outset 0
      );
      @include apply-motion(
        $md-sys-motion-spring-fast-effects,
        border-width,
        border-color
      );
    }
    & .MdcTextField-top-border-container {
      position: absolute;
      top: 0;
      bottom: 0;
      $outset-with-overlay: calc($clip-path-outset - 0.5px);
      left: $outset-with-overlay;
      right: $outset-with-overlay;
      overflow: clip;
    }
    & .MdcTextField-label-border-animation {
      user-select: none;

      line-height: get-token(
        $md-comp-outlined-text-field,
        label-text-populated-line-height
      );
      font-size: get-token(
        $md-comp-outlined-text-field,
        label-text-populated-size
      );
      padding-inline: 4px;
      left: 12px;

      color: transparent;

      &::before,
      &::after {
        content: "";
        position: absolute;
        border-top-style: solid;
        border-top-width: var(--border-width);
        border-color: var(--border-color);
        height: 0px;
        width: 100vw;
        top: 0;
      }

      &::before {
        right: 50%;
        @include apply-motion(
          $md-sys-motion-spring-fast-effects,
          right,
          border-top-width,
          border-color
        );
      }

      &::after {
        left: 50%;
        @include apply-motion(
          $md-sys-motion-spring-fast-effects,
          left,
          border-top-width,
          border-color
        );
      }
    }
    &:has(input:focus),
    &:has(input:not(:placeholder-shown)) {
      & .MdcTextField-label-border-animation {
        &::before {
          right: 100%;
        }

        &::after {
          left: 100%;
        }
      }
      & .MdcTextField-label-visible {
        top: 0;
        left: calc(
          12px + get-token($md-comp-outlined-text-field, container-shape) +
            get-token($md-comp-outlined-text-field, outline-width, 0px)
        );
      }
    }
  }

  &.MdcTextField-filled {
    $focus-ring-tokens: (
      tokens: (
        focus-indicator-color: get-token(
            $md-comp-filled-text-field,
            focus-active-indicator-color
          ),
        error-focus-indicator-color: get-token(
            $md-comp-filled-text-field,
            error-focus-active-indicator-color
          ),
        focus-indicator-thickness: $md-sys-state-focus-indicator-thickness,
      ),
    );
    @include apply-focus-ring-indicator($focus-ring-tokens);

    & .MdcTextField-input-container {
      background-color: rgb(
        get-token($md-comp-filled-text-field, container-color)
      );
    }

    & input {
      padding-block-start: 24px;
      padding-block-end: 8px;
    }
    & .MdcTextField-active-indicator {
      position: absolute;
      inset: auto 0 0 0;
      height: var(
        --indicator-height,
        #{get-token($md-comp-filled-text-field, active-indicator-height)}
      );
      background-color: var(
        --indicator-color,
        #{rgb(get-token($md-comp-filled-text-field, active-indicator-color))}
      );
      @include apply-motion(
        $md-sys-motion-spring-fast-effects,
        height,
        background-color
      );
    }

    & input {
      padding-block-start: 24px;
      padding-block-end: 8px;
    }

    &:hover {
      --indicator-height: #{get-token(
          $md-comp-filled-text-field,
          hover-active-indicator-height
        )};
      --indicator-color: #{rgb(
          get-token($md-comp-filled-text-field, hover-active-indicator-color)
        )};
      & .MdcStateLayer {
        background: rgb(
          get-token($md-comp-filled-text-field, hover-state-layer-color)
        );
        opacity: get-token(
          $md-comp-filled-text-field,
          hover-state-layer-opacity
        );
      }

      &.MdcTextField-error .MdcStateLayer {
        background: rgb(
          get-token($md-comp-filled-text-field, error-hover-state-layer-color)
        );
        opacity: get-token(
          $md-comp-filled-text-field,
          error-hover-state-layer-opacity
        );
      }
      &.MdcTextField-error {
        --indicator-color: #{rgb(
            get-token(
              $md-comp-filled-text-field,
              error-hover-active-indicator-color
            )
          )};
      }
    }

    &:has(input:focus) {
      --indicator-height: #{get-token(
          $md-comp-filled-text-field,
          focus-active-indicator-height
        )};
      --indicator-color: #{rgb(
          get-token($md-comp-filled-text-field, focus-active-indicator-color)
        )};
    }

    &.MdcTextField-error {
      --indicator-color: #{rgb(
          get-token($md-comp-filled-text-field, error-active-indicator-color)
        )};
    }

    &.MdcTextField-error:has(input:focus) {
      --indicator-color: #{rgb(
          get-token(
            $md-comp-filled-text-field,
            error-focus-active-indicator-color
          )
        )};
    }

    &:has(input:disabled) {
      --indicator-height: #{get-token(
          $md-comp-filled-text-field,
          disabled-active-indicator-height
        )};
      --indicator-color: #{rgba(
          get-token(
            $md-comp-filled-text-field,
            disabled-active-indicator-color
          ),
          get-token(
            $md-comp-filled-text-field,
            disabled-active-indicator-opacity
          )
        )};
    }

    &:has(input:focus),
    &:has(input:not(:placeholder-shown)) {
      & .MdcTextField-label-visible {
        top: 16px;
        left: 16px;
      }
    }
  }

  & .MdcTextField-supporting-text-container {
    justify-content: space-between;
    display: flex;

    padding-block-start: 4px;
    padding-inline: 16px;
    > *:last-child {
      padding-inline-start: 16px;
    }
  }
}
